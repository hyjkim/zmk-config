/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MO_TO(layer) &mo_to layer layer   // Macro to apply momentary-layer-on-hold/to-layer-on-tap to a specific layer

&mt {
      flavor = "tap-preferred";
 //       tapping-term-ms = <1000>; 
};

/ {
    behaviors {
     // momentary on hold, toggle on tap
        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_to";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };
      // tap: sticky layer 1 | double tap: toggle layer 1
      cl1: cl1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYER_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl 1>, <&to 1>;
        };

      // tap: sticky layer 2 | double tap: toggle layer 2
      cl2: cl2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYER_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl 2>, <&to 2>;
        };

      // tap: sticky layer 3 | double tap: toggle layer 3
      cl3: cl3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYER_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl 3>, <&to 3>;
        };


// tap: sticky shift | double tap: capsword | triple tap: cancel capsword
// ZMK_BEHAVIOR(ss_cw, tap_dance,
//     tapping-term-ms = <200>;
//     bindings = <&sk LSHFT>, <&caps_word>, <CANCEL>;
// )
// tap: sticky-shift | lshft + tap: caps-word | hold: shift
// from https://github.com/urob/zmk-config/blob/main/config/base.keymap 
        ss_cw: ss_cw {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            label = "ss_cw";
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

    ht: hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        quick_tap_ms = <150>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | NONE |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P   | NONE |
            // | NONE |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  '   | NONE |
            // | NONE |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  | BSPC | NONE |
            //                    | num | sym | SHFT |   | CTRL | SPC  | NAV |

            bindings = <
  &none   &kp Q   &kp W   &kp E   &kp R      &kp T      &kp Y      &kp U      &kp I    &kp O     &kp P   &none
  &none   &kp A   &kp S   &kp D   &kp F      &kp G      &kp H      &kp J      &kp K    &kp L   &kp SQT   &none
  &none   &kp Z   &kp X   &kp C   &kp V      &kp B      &kp N      &kp M  &kp COMMA  &kp DOT  &kp BSPC   &none
                          &cl1   &cl2  &ss_cw &sk LCTRL  &mt LC(LS(LALT)) SPACE    &cl3
            >;
        };

        number_layer {
            // -----------------------------------------------------------------------------------------
            // | NONE |    |    |    |    |    |   |  +  |  7  |  8  |  9  |  nav  | NONE |
            // | NONE |    |    |    |    |    |   |  -  |  4  |  5  |  6  |       | NONE | 
            // | NONE |    |    |    |    |    |   |     |     |     |     |  BSPC  | NONE |
            //                    |  |     |  |   |  |     |  |

            bindings = <
  &none  &kp C_VOLUME_DOWN   &kp C_VOLUME_UP  &kp C_BRI_DN  &kp C_BRI_UP  &kp KP_MULTIPLY      &kp PLUS  &ht F7 NUMBER_7 &ht F8 NUMBER_8 &ht F9 NUMBER_9     &none   &none
  &none         &bt BT_CLR      &bt BT_SEL 0    &bt BT_PRV    &bt BT_NXT    &kp KP_DIVIDE     &kp MINUS  &ht F4 NUMBER_4  &ht F5 NUMBER_5  &ht F6 NUMBER_6  &kp ENTER   &none
  &none            &kp TAB  &kp C_PLAY_PAUSE    &kp C_NEXT    &kp PERIOD     &kp KP_EQUAL  &kp NUMBER_0  &ht F1 NUMBER_1  &ht F2 NUMBER_2  &ht F3 NUMBER_3    &trans   &none
                          &cl1   &cl2  &ss_cw &sk LCTRL  &to 0    &cl3
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &none   &kp EXCL     &kp AT          &kp HASH           &kp DLLR      &kp PRCNT  &kp CARET              &kp AMPS        &kp KP_MULTIPLY         &kp SLASH  &kp BACKSLASH   &none
  &none  &kp TILDE  &kp GRAVE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET      &kp COLON  &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES &kp SINGLE_QUOTE      &none
  &none    &kp TAB  &kp EQUAL    &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp SEMICOLON   &kp PLUS             &kp UNDER                 &trans            &trans         &trans   &none
                          &cl1   &cl2  &ss_cw &sk LCTRL  &to 0    &cl3
            >;
        };

        nav {
            bindings = <
 &none   &none  &none  &none  &none  &none  &kp LG(C) &kp LG(X)  &none    &kp DEL            &kp LG(V)  &none
 &none   &none  &none  &none  &none  &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans &none
 &none  &kp TAB  &none  &none  &none  &none  &none          &none          &none        &none           &trans  &none
                          &cl1   &cl2  &ss_cw &sk LCTRL  &to 0    &cl3
            >;
        };
    };

    // Homerow bindings
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp ESC>;
        };

        combo_ret {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp RET>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp TAB>;
        };

        left_command {
            bindings = <&kp LEFT_COMMAND>;
            key-positions = <15 16>;
        };

        left_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 14>;
        };

        right_command {
            bindings = <&kp RIGHT_COMMAND>;
            key-positions = <19 20>;
        };

        right_alt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <19 21>;
        };
    };
};
