/*=G
 * Copyight (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NUM 1
#define SYM 2
#define NAV 3
#define SET 4

#define MO_TO(layer) &mo_to layer layer   // Macro to apply momentary-layer-on-hold/to-layer-on-tap to a specific layer
#define ZMK_HELPER_STRINGIFY(x) #xo

// macro for combos
#define ALL 0xff
#if !defined COMBO_TERM
    #define COMBO_TERM 30
#endif

#define ZMK_COMBO(name, combo_bindings, keypos, combo_layers) \
    / { \
        combos { \
            compatible = "zmk,combos"; \
            combo_ ## name { \
                timeout-ms = <COMBO_TERM>; \
                bindings = <combo_bindings>; \
                key-positions = <keypos>; \
                layers = <combo_layers>; \
            }; \
        }; \
    };

&mt {
  flavor = "tap-preferred";
  //       tapping-term-ms = <1000>; 
};

// Key numbers
// -----------------------------------------------------------------------------------------
// | NONE |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  10  | NONE |
// | NONE |  13 |  14 |  15 |  16 |  17 |   |  18 |  19  |  20 |  21 |  22  | NONE |
// | NONE |  25 |  26 |  27 |  28 |  29 |   |  30 |  31  |  32 |  33 |  34  | NONE |
//                    | 36  |  37 | 38  |   |  39 |  40  |  41 |

// modifier combos
ZMK_COMBO(combo_esc,  &kp ESC, 13 14, ALL)
ZMK_COMBO(combo_ret,  &kp RET, 21 22, ALL)
ZMK_COMBO(combo_tab,  &kp TAB, 25 26, ALL)
ZMK_COMBO(combo_lcmd,  &kp LEFT_COMMAND, 15 14, ALL)
ZMK_COMBO(combo_lalt,  &kp LEFT_ALT, 16 14, ALL)
ZMK_COMBO(combo_rcmd,  &kp RIGHT_COMMAND, 19 20, ALL)
ZMK_COMBO(combo_ralt,  &kp RIGHT_ALT, 19 21, ALL)

// shifted number symbol combos
ZMK_COMBO(combo_excl,  &kp EXCL, 1 13, ALL)
ZMK_COMBO(combo_at,  &kp AT, 2 14, ALL)
ZMK_COMBO(combo_hash,  &kp HASH, 3 15, ALL)
ZMK_COMBO(combo_dllr,  &kp DLLR, 4 16, ALL)
ZMK_COMBO(combo_prcnt,  &kp PRCNT, 5 17, ALL)
ZMK_COMBO(combo_caret,  &kp CARET, 6 18, ALL)
ZMK_COMBO(combo_amps,  &kp AMP, 7 19, ALL)
ZMK_COMBO(combo_mult,  &kp KP_MULTIPLY, 8 20, ALL)
ZMK_COMBO(combo_slash,  &kp SLASH, 9 21, ALL)
ZMK_COMBO(combo_bslash,  &kp , 10 22, ALL)

// nav combos
ZMK_COMBO(combo_excl,  &to NAV, 3 4 5, NAV) 
ZMK_COMBO(combo_excl,  &bt BT_CLR, 7 8 9, SET) 

/ {
  behaviors {
    // momentary on hold, toggle on tap
mo_to: behavior_mo_to {
         compatible = "zmk,behavior-hold-tap";
         label = "mo_to";
#binding-cells = <2>;
         flavor = "hold-preferred";
         tapping-term-ms = <200>;
         bindings = <&mo>, <&to>;
       };

// prevent multiple uppercase letters on sticky shift https://github.com/zmkfirmware/zmk/issues/903
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release;
    };
       // tap: sticky shift | double tap: capsword | triple tap: cancel capsword
       // ZMK_BEHAVIOR(ss_cw, tap_dance,
       //     tapping-term-ms = <200>;
       //     bindings = <&sk LSHFT>, <&caps_word>, <CANCEL>;
       // )
       // tap: sticky-shift | lshft + tap: caps-word | hold: shift
       // from https://github.com/urob/zmk-config/blob/main/config/base.keymap 
ss_cw: ss_cw {
         compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
         label = "ss_cw";
         bindings = <&sk LSHFT>, <&caps_word>;
         mods = <(MOD_LSFT)>;
       };

ht: hold_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_TAP";
#binding-cells = <2>;
      tapping_term_ms = <200>;
      quick_tap_ms = <150>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    // tap: sticky layer 1 | double tap: toggle layer 1
cl1: cl1 {
       compatible = "zmk,behavior-tap-dance";
       label = "TD_LAYER_1";
#binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = <&sl 1>, <&to 1>;
     };

     // tap: sticky layer 2 | double tap: toggle layer 2
cl2: cl2 {
       compatible = "zmk,behavior-tap-dance";
       label = "TD_LAYER_2";
#binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = <&sl 2>, <&to 2>;
     };

     // tap: sticky layer 3 | double tap: toggle layer 3
cl3: cl3 {
       compatible = "zmk,behavior-tap-dance";
       label = "TD_LAYER_3";
#binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = <&sl 3>, <&to 3>;
     };
  };

  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      // -----------------------------------------------------------------------------------------
      // | NONE |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P   | NONE |
      // | NONE |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  '   | NONE |
      // | NONE |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  | BSPC | NONE |
      //                    | num | sym | SHFT |   | CTRL | SPC  | NAV |

      bindings = <
        &none   &kp Q   &kp W   &kp E   &kp R      &kp T      &kp Y      &kp U      &kp I    &kp O     &kp P   &none
        &none   &kp A   &kp S   &kp D   &kp F      &kp G      &kp H      &kp J      &kp K    &kp L   &kp SQT   &none
        &none   &kp Z   &kp X   &kp C   &kp V      &kp B      &kp N      &kp M  &kp COMMA  &kp DOT  &kp BSPC   &none
        &cl1   &cl2  &ss_cw &sk LCTRL  &mt LC(LS(LALT)) SPACE    MO_TO(3)
        >;
    };

    number_layer {
      // -----------------------------------------------------------------------------------------
      // | NONE |    |    |    |    |    |   |  +  |  7  |  8  |  9  |  nav  | NONE |
      // | NONE |    |    |    |    |    |   |  -  |  4  |  5  |  6  |       | NONE | 
      // | NONE |    |    |    |    |    |   |     |     |     |     |  BSPC  | NONE |
      //                    |  |     |  |   |  |     |  |

      bindings = <
        &none  &kp C_VOLUME_DOWN   &kp C_VOLUME_UP  &kp C_BRI_DN  &kp C_BRI_UP  &kp KP_MULTIPLY      &kp PLUS  &ht F7 NUMBER_7 &ht F8 NUMBER_8 &ht F9 NUMBER_9     &none   &none
        &none   &none &none  &none  &none    &kp KP_DIVIDE     &kp MINUS  &ht F4 NUMBER_4  &ht F5 NUMBER_5  &ht F6 NUMBER_6  &kp ENTER   &none
        &none            &kp TAB  &kp C_PLAY_PAUSE    &kp C_NEXT    &kp PERIOD     &kp KP_EQUAL  &kp PERIOD  &ht F1 NUMBER_1  &ht F2 NUMBER_2  &ht F3 NUMBER_3    &trans   &none
        &cl1   &cl2  &ss_cw &mt LCTRL NUMBER_0  &to 0    MO_TO(3)
        >;
    };

    symbol_layer {
      // -----------------------------------------------------------------------------------------
      //  combos|  !  |  @  |  #  |  $  |  %  |||||  ^  |  &  |  *  |  /  |  \  |      |

      // | NONE |  ~  |     |     |  (  |     |||||     |  )  |  +  |  ?  |  |  | NONE |
      // | NONE |  `  |  =  |  :  |  [  |  <  |||||  >  |  ]  |  -  |  _  |  "  | NONE |
      // | NONE | TAB |     |  ;  |  {  |     |||||     |  }  |  ,  |  .  | BSPC| NONE |
      //                    | num | sym |SHFT ||||| CTRL | SPC  | NAV |

      bindings = <
        &none  &kp TILDE  &none      &none      &kp LEFT_PARENTHESIS  &none      &none  &kp RIGHT_PARENTHESIS  &kp PLUS  &kp QMARK  &kp PIPE  &none
        &none  &kp GRAVE  &kp EQUAL  &kp COLON  &kp LEFT_BRACKET        &kp LT     &kp GT  &kp RIGHT_BRACKET        &kp MINUS &kp UNDER  &kp DOUBLE_QUOTES  &none
        &none  &kp TAB    &none      &kp SEMI   &kp LEFT_BRACE      &none      &none  &kp RIGHT_BRACE      &trans    &trans  &kp BSPC &none
        &cl1   &cl2  &ss_cw &sk LCTRL  &to 0    MO_TO(3)
        >;
    };

    nav {
      bindings = <
        &none   &none  &none  &none  &none  &none  &kp LG(C) &kp LG(X)  &none    &kp DEL            &kp LG(V)  &none
        &none   &none  &none  &none  &none  &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans &none
        &none  &kp TAB  &none  &none  &none  &none  &none          &none          &none        &none           &trans  &none
        &cl1   &cl2  &ss_cw &sk LCTRL  &to 0    MO_TO(3)
        >;
    };

    settings {
      bindings = <
        &none   &none  &none  &none  &none  &none    &none      &bt BT_SEL 0    &bt BT_PRV    &bt BT_NXT    &none
        &none   &none  &none  &none  &none  &none    &none    &none    &none    &none    &none    &none
        &none   &none  &none  &none  &none  &none    &none    &none    &none    &none    &none    &none
        &cl1   &cl2  &ss_cw &sk LCTRL  &to 0    MO_TO(3)
        >;
    };
  };
};
